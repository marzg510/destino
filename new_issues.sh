#!/bin/bash

# GitHub CLIでissueを一括作成するスクリプト
# 使用前に `gh auth login` でGitHubにログインしておく必要があります

REPO="marzg510/destino"

# Issue 1: プロジェクト基盤の構築
gh issue create \
  --repo $REPO \
  --title "[Setup] Flutter Flame プロジェクトの基盤構築" \
  --body "Flame Game Frameworkを使用したFlutterプロジェクトの基盤を構築する

### タスク
- [ ] pubspec.yamlにFlame依存関係を追加
- [ ] 基本的なGameクラスを作成
- [ ] main.dartでゲームを起動する最小構成を実装
- [ ] 画面サイズとゲーム座標系の基本設定

### 完了条件
- 空の画面でFlameゲームが起動すること
- ゲームループが正常に動作すること

優先度: High"

Issue 2: 主人公キャラクターの実装
gh issue create \
  --repo $REPO \
  --title "[Feature] 主人公キャラクターの基本実装" \
  --body "画面上に表示される主人公キャラクター（最初は四角形で可）を実装する

### タスク
- [ ] PlayerComponentクラスの作成
- [ ] 四角形での主人公キャラクター描画
- [ ] 画面上の初期位置設定
- [ ] 基本的な当たり判定領域の設定

### 完了条件
- 画面上に主人公が表示されること
- キャラクターの位置が正しく設定されること

優先度: High"

# Issue 3: 自動移動システムの実装
gh issue create \
  --repo $REPO \
  --title "[Feature] 主人公の自動移動システム" \
  --body "主人公が目的地に向かって自動で移動するシステムを実装する

### タスク
- [ ] 目的地座標の設定機能
- [ ] 目的地への直線移動アルゴリズム
- [ ] 移動速度の調整可能な仕組み
- [ ] 移動中の状態管理

### 完了条件
- 主人公が指定した目的地に向かって自動で移動すること
- 移動速度が適切であること
- 移動の開始・停止が制御できること

優先度: High"

# Issue 4: 目的地システムの実装
gh issue create \
  --repo $REPO \
  --title "[Feature] 目的地の表示と到達判定" \
  --body "目的地の表示と主人公が到達したかどうかの判定システムを実装する

### タスク
- [ ] TaskComponentクラスの作成
- [ ] 目的地の視覚表現（円や星などのマーカー）
- [ ] 主人公と目的地の距離計算
- [ ] 到達判定のしきい値設定
- [ ] 到達時のイベント発火仕組み

### 完了条件
- 目的地が画面上に表示されること
- 主人公が目的地に近づくと到達判定が働くこと
- 到達時にイベントが発生すること

優先度: Medium"

# Issue 5: エフェクトシステムの基盤
gh issue create \
  --repo $REPO \
  --title "[Feature] 基本的なエフェクトシステム" \
  --body "目的地到達時に発生するエフェクト（花が咲く、音が鳴る等）の基盤を実装する

### タスク
- [ ] EffectComponentベースクラスの作成
- [ ] 花が咲くエフェクトの実装（パーティクルまたは画像）
- [ ] エフェクトのライフサイクル管理
- [ ] エフェクトの再生・停止機能

### 完了条件
- 目的地到達時にエフェクトが再生されること
- エフェクトが適切なタイミングで終了すること
- 複数のエフェクトが同時再生可能なこと

優先度: Medium"

# Issue 6: 音響システムの実装
gh issue create \
  --repo $REPO \
  --title "[Feature] 基本的な音響システム" \
  --body "目的地到達時の効果音やBGMの再生システムを実装する

### タスク
- [ ] flame_audioパッケージの導入
- [ ] 基本的な効果音の準備（到達時の音）
- [ ] AudioManagerクラスの作成
- [ ] 音量調整機能
- [ ] 音声ファイルのプリロード

### 完了条件
- 目的地到達時に効果音が再生されること
- 音量が適切に調整されていること
- 音声の遅延が少ないこと

優先度: Low"

# Issue 7: 次の目的地生成システム
gh issue create \
  --repo $REPO \
  --title "[Feature] 次の目的地への移行システム" \
  --body "目的地到達後、次の目的地を生成して移動を継続するシステムを実装する

### タスク
- [ ] ランダムな次の目的地生成
- [ ] 画面境界内での目的地配置
- [ ] 前の目的地の削除処理
- [ ] 移行時のアニメーション（任意）
- [ ] 連続的な移動サイクルの実装

### 完了条件
- 目的地到達後、新しい目的地が生成されること
- 主人公が継続的に移動し続けること
- 画面外に目的地が生成されないこと

優先度: Medium"

# Issue 8: ゲーム状態管理の実装
gh issue create \
  --repo $REPO \
  --title "[Feature] 基本的なゲーム状態管理" \
  --body "ゲームの開始・一時停止・再開などの基本的な状態管理を実装する

### タスク
- [ ] GameStateEnumの定義
- [ ] 状態遷移の管理
- [ ] 一時停止・再開機能
- [ ] ゲームリセット機能
- [ ] 基本的なUI（開始ボタンなど）

### 完了条件
- ゲームの開始・停止が制御できること
- 状態に応じて適切な動作をすること
- 基本的なUI操作が可能なこと

優先度: Medium"

# Issue 9: 統合テストとポリッシュ
gh issue create \
  --repo $REPO \
  --title "[Test] フェーズ1の統合テストとポリッシュ" \
  --body "フェーズ1の全機能を統合し、動作確認とユーザビリティの改善を行う

### タスク
- [ ] 全機能の統合動作テスト
- [ ] パフォーマンスの確認と最適化
- [ ] 視覚的な調整（色、サイズ、配置）
- [ ] ゲームのテンポ調整
- [ ] バグ修正と改善

### 完了条件
- 5-10分間安定してゲームが動作すること
- 視覚的に心地よい体験になっていること
- 明らかなバグがないこと

優先度: Low"

echo "全てのissueが作成されました！"